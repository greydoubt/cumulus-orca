"use strict";(self.webpackChunkorca_website=self.webpackChunkorca_website||[]).push([[1522],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(n),g=o,m=c["".concat(s,".").concat(g)]||c[g]||p[g]||r;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5409:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const r={id:"local-debugging",title:"Local Debugging with AWS Resources",description:"Instructions on Running Code Locally Against AWS Resources"},i=void 0,l={unversionedId:"developer/development-guide/code/local-debugging",id:"developer/development-guide/code/local-debugging",title:"Local Debugging with AWS Resources",description:"Instructions on Running Code Locally Against AWS Resources",source:"@site/docs/developer/development-guide/code/local-debugging.md",sourceDirName:"developer/development-guide/code",slug:"/developer/development-guide/code/local-debugging",permalink:"/cumulus-orca/docs/developer/development-guide/code/local-debugging",draft:!1,editUrl:"https://github.com/nasa/cumulus-orca/edit/develop/website/docs/developer/development-guide/code/local-debugging.md",tags:[],version:"current",frontMatter:{id:"local-debugging",title:"Local Debugging with AWS Resources",description:"Instructions on Running Code Locally Against AWS Resources"},sidebar:"dev_guide",previous:{title:"Running Pylint Against Your Code",permalink:"/cumulus-orca/docs/developer/development-guide/code/linting"},next:{title:"Unit Tests",permalink:"/cumulus-orca/docs/developer/development-guide/code/unit-tests"}},s={},u=[{value:"Limitations",id:"limitations",level:2},{value:"Setup",id:"setup",level:2},{value:"Optional Setup",id:"optional-setup",level:3},{value:"Debugging Example",id:"debugging-example",level:2}],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Running and debugging code locally is a vital phase in the development and testing process.\nUnfortunately, we do not currently have a method of simulating the cloud resources of AWS on a developer's machine.\nThe methods described below will give a developer machine access to AWS resources, which can be useful for testing input/output with real data and line-by-line debugging in the IDE of your choice."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#limitations"},"Limitations")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#setup"},"Setup")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#debugging-example"},"Debugging Example"))),(0,o.kt)("h2",{id:"limitations"},"Limitations"),(0,o.kt)("p",null,"Note that this is not a replacement for integration testing.\nPrograms should still be deployed to a realistic AWS environment and run with realistic data to ensure that the methods described below do not grant an unexpected advantage/disadvantage to locally-run code."),(0,o.kt)("p",null,"This method also bypasses much of the AWS configuration and deployment steps.\nEnvironment variables, Key-Value-Paris, and other inputs should be double-checked in AWS, especially if their function is internal to the program and otherwise invisible."),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"This guide assumes that you have ",(0,o.kt)("a",{parentName:"p",href:"/cumulus-orca/docs/developer/deployment-guide/deployment-with-cumulus"},"deployed ORCA"),".\nCumulus components are largely unneeded, though the ",(0,o.kt)("inlineCode",{parentName:"p"},"PREFIX-CumulusECSCluster")," EC2 Instance is required.\nThis EC2 Instance's 'Instance ID' can be identified using the AWS GUI or by running"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'aws ec2 describe-instances --filters Name=instance-state-name,Values=running Name=tag:Name,Values={PREFIX}-CumulusECSCluster --query "Reservations[*].Instances[*].InstanceId" --output text\n')),(0,o.kt)("p",null,"Once the Instance ID is identified, run the following in a terminal. Be sure to replace ",(0,o.kt)("inlineCode",{parentName:"p"},"{Instance ID}"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"aws ssm start-session --target {Instance ID} --document-name AWS-StartPortForwardingSession --parameters portNumber=22,localPortNumber=6868\n")),(0,o.kt)("h3",{id:"optional-setup"},"Optional Setup"),(0,o.kt)("p",null,"If you have deployed the RDS Database, and want to run code against it or check its contents via Aqua Data Studio, an extra step is required."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"AWS is inconsistent with naming. RDS 'Database' may also be called RDS 'Instance'")),(0,o.kt)("p",null,"First, retrieve the database's 'Endpoint'.\nIf you deployed via Cumulus' module, this is the 'rds_endpoint' output.\nOtherwise, it can be found via the AWS GUI."),(0,o.kt)("p",null,"Run the following in an terminal. Be sure to replace ",(0,o.kt)("inlineCode",{parentName:"p"},"{DB Endpoint}")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"{Path to PREFIX-key-pair.pem}"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'ssh -p 6868 -L 5432:{DB Endpoint}:5432 -i "{Path to PREFIX-key-pair.pem}" -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" ec2-user@127.0.0.1\n')),(0,o.kt)("h2",{id:"debugging-example"},"Debugging Example"),(0,o.kt)("p",null,"After following the steps in ",(0,o.kt)("a",{parentName:"p",href:"/cumulus-orca/docs/developer/development-guide/code/setup-dev-env"},"Setup Dev Env")),(0,o.kt)("p",null,"Ideally, developed code should isolate AWS configuration retrieval to a single function.\nFor example, the following code bypasses secret retrieval for quicker testing turnaround by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"task")," instead of the ",(0,o.kt)("inlineCode",{parentName:"p"},"handler")," entry-point."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import request_status_for_job\n\ntemp_db_connect_info = {\n    "admin_database": "postgres",\n    "admin_password": "An0th3rS3cr3t",\n    "admin_username": "postgres",\n    "host": "localhost",\n    "port": "5432",\n    "user_database": "PREFIX_orca",\n    "user_password": "This1sAS3cr3t",\n    "user_username": "PREFIX_orcauser",\n}\n\nprint(request_status_for_job.task(\n    "08c767d2-b4b9-4a05-9bc2-375038f33237",\n    temp_db_connect_info))\n')))}p.isMDXComponent=!0}}]);