"use strict";(self.webpackChunkorca_website=self.webpackChunkorca_website||[]).push([[1179],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(g,a(a({ref:t},u),{},{components:n})):r.createElement(g,a({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={id:"postgres-tips",title:"Postgres Paging",description:"Tips on writing efficient Postgres queries."},a=void 0,l={unversionedId:"developer/development-guide/code/postgres-tips",id:"developer/development-guide/code/postgres-tips",title:"Postgres Paging",description:"Tips on writing efficient Postgres queries.",source:"@site/docs/developer/development-guide/code/postgres-tips.md",sourceDirName:"developer/development-guide/code",slug:"/developer/development-guide/code/postgres-tips",permalink:"/cumulus-orca/docs/developer/development-guide/code/postgres-tips",draft:!1,editUrl:"https://github.com/nasa/cumulus-orca/edit/develop/website/docs/developer/development-guide/code/postgres-tips.md",tags:[],version:"current",frontMatter:{id:"postgres-tips",title:"Postgres Paging",description:"Tips on writing efficient Postgres queries."},sidebar:"dev_guide",previous:{title:"Parallel Scripting",permalink:"/cumulus-orca/docs/developer/development-guide/code/parallel-scripting"},next:{title:"Documentation Introduction",permalink:"/cumulus-orca/docs/developer/development-guide/documentation/contrib-documentation-intro"}},s={},p=[{value:"Limit",id:"limit",level:2},{value:"Paging",id:"paging",level:2},{value:"Sample Table",id:"sample-table",level:3},{value:"Page Retrieval",id:"page-retrieval",level:3},{value:"Next Page (Default)",id:"next-page-default",level:4},{value:"Previous Page",id:"previous-page",level:4},{value:"Cursors",id:"cursors",level:3},{value:"No Cursor",id:"no-cursor",level:4}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"limit"},"Limit"),(0,o.kt)("p",null,"Users may wish to adjust the number of results they receive to adjust memory usage, processing time, etc.\nIdeally this ",(0,o.kt)("inlineCode",{parentName:"p"},"limit")," value would have an upper bound, to avoid users requesting far too much data at once.\nHowever, in the particular case of GraphQL, users may request varying amounts of properties on their data, making an upper limit difficult to calculate for a given query."),(0,o.kt)("h2",{id:"paging"},"Paging"),(0,o.kt)("p",null,"It will not always be feasible/desired to return all results at once.\nIn this case, results should be returned one 'page' at a time, with cursors included to allow customers to easily request the next page."),(0,o.kt)("h3",{id:"sample-table"},"Sample Table"),(0,o.kt)("p",null,"Code in the following sections will be based off of the following table:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'CREATE TABLE "orca"."test_table"  ( \n    "key0"    int4 NULL,\n    "key1"    int4 NULL,\n    "key2"    int4 NULL \n    )\nGO\nALTER TABLE "orca"."test_table"\n    ADD CONSTRAINT "test_uniqueness"\n    UNIQUE ("key0", "key1", "key2")\n')),(0,o.kt)("p",null,"Adjust code as needed to match your table."),(0,o.kt)("p",null,"If you wish to do performance testing with the sample table, run the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"do $$\nbegin\n    for i in 1..100 loop\n        for j in 1..100 loop\n            for k in 1..100 loop\n                INSERT INTO orca.test_table(key0, key1, key2) VALUES(i, j, 'k);\n            end loop;\n        end loop;\n    end loop;\nend; $$\n")),(0,o.kt)("h3",{id:"page-retrieval"},"Page Retrieval"),(0,o.kt)("p",null,"The initial impulse for retrieving a page may be to ",(0,o.kt)("inlineCode",{parentName:"p"},"SKIP")," the number of entries from previous pages, utilizing ",(0,o.kt)("inlineCode",{parentName:"p"},"LIMIT")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"OFFSET")," like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"SELECT\n    *\nFROM\n    orca.test_table\nORDER BY \n    key0,\n    Key1,\n    key2\nLIMIT 100\nOFFSET 20000\n")),(0,o.kt)("p",null,"However, this requires the query to process all of the entries that are not returned due to the ",(0,o.kt)("inlineCode",{parentName:"p"},"OFFSET"),", and is therefore non-performant on large datasets."),(0,o.kt)("p",null,"A better option is to apply a ",(0,o.kt)("inlineCode",{parentName:"p"},"WHERE")," clause that picks up after the previous query.\nWhen applied via indexed columns, this eliminates the need for the database to process elements that are outside of the requested page, drastically improving the performance of the query on large datasets.\nIn the examples below, assume that the row we will be paging from is ",(0,o.kt)("inlineCode",{parentName:"p"},"key0: 50, key1: 98, key2: 60")),(0,o.kt)("h4",{id:"next-page-default"},"Next Page (Default)"),(0,o.kt)("p",null,"Retrieving the next page of ",(0,o.kt)("inlineCode",{parentName:"p"},"limit")," 100 would look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"SELECT\n    * \nFROM\n    orca.test_table\nWHERE\n    key0 >= 50\n    AND\n        (key0 > 50\n        OR\n            (key1 >= 98\n            AND\n                (key1 > 98\n                OR\n                    (key2 > 60)\n                )\n            )\n        )\nORDER BY \n    key0 ASC, \n    key1 ASC, \n    key2 ASC\nLIMIT 100\n")),(0,o.kt)("p",null,"Which will return data in the format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"key0     key1     key2    \n-------  -------  ------- \n50       98       61      \n50       98       62\n50       98       63\n  ... TRUNCATED ...\n50       99       58      \n50       99       59 \n50       99       60 \n")),(0,o.kt)("p",null,"Note that the order of the keys in the ",(0,o.kt)("inlineCode",{parentName:"p"},"WHERE")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ORDER BY")," clauses must be identical in this example.\nThe filter should eliminate all of the previously retrieved rows."),(0,o.kt)("h4",{id:"previous-page"},"Previous Page"),(0,o.kt)("p",null,"In the event the user requests the previous page, modify the default query by flipping the signs and ",(0,o.kt)("inlineCode",{parentName:"p"},"ORDER"),", then reversing the ",(0,o.kt)("inlineCode",{parentName:"p"},"ORDER")," of results."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"SELECT\n    * \nFROM\n    orca.test_table\nWHERE\n    key0 <= 50\n    AND\n        (key0 < 50\n        OR\n            (key1 <= 98\n            AND\n                (key1 < 98\n                OR\n                    (key2 < 60)\n                )\n            )\n        )\nORDER BY \n    key0 DESC, \n    key1 DESC, \n    key2 DESC\nLIMIT 100\n")),(0,o.kt)("p",null,"Once the results are reversed, data will be in the format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"key0     key1     key2    \n-------  -------  ------- \n50       97       60      \n50       97       62\n50       97       63\n  ... TRUNCATED ...\n50       98       57  \n50       98       58      \n50       98       59 \n")),(0,o.kt)("h3",{id:"cursors"},"Cursors"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"decode_cursor")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"encode_cursor")," in the graphql project can be used to encode and decode arbitrary dictionaries for use in future queries.\nIn our example table, this would consist of ",(0,o.kt)("inlineCode",{parentName:"p"},"key0"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"key1"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"key2")," to be able to enforce paging uniqueness.\nThese cursors point to individual elements.\nAt minimum, users should be given a ",(0,o.kt)("inlineCode",{parentName:"p"},"start_cursor")," and an ",(0,o.kt)("inlineCode",{parentName:"p"},"end_cursor")," for any page they retrieve.\nThe customer can then make a request with ",(0,o.kt)("inlineCode",{parentName:"p"},"cursor: {their end_cursor}, direction: 'next', limit: 100")," to get the page past the end_cursor,\nor ",(0,o.kt)("inlineCode",{parentName:"p"},"cursor: {their start_cursor}, direction: 'previous', limit: 100")," to get the page before the start_cursor."),(0,o.kt)("h4",{id:"no-cursor"},"No Cursor"),(0,o.kt)("p",null,"If no cursor is specified, behavior depends on ",(0,o.kt)("inlineCode",{parentName:"p"},"direction"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If ",(0,o.kt)("inlineCode",{parentName:"li"},"direction")," is ",(0,o.kt)("inlineCode",{parentName:"li"},"next"),", get the first page of results using standard ordering."),(0,o.kt)("li",{parentName:"ul"},"If ",(0,o.kt)("inlineCode",{parentName:"li"},"direction")," is ",(0,o.kt)("inlineCode",{parentName:"li"},"previous"),", get the last page of results using inverted ordering.\nThis allows users to retrieve either the first or last page of results, effectively allowing them to begin at the start or end of the record-set and page from there.\nThis is particularly helpful in cases where the query is ordered by date, and users may want to look at events in chronological order, or may only want to look at the most recent events.")))}c.isMDXComponent=!0}}]);