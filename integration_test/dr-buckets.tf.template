# This will get the DR AWS account ID.
data "aws_caller_identity" "dr_account" {}

# "worm" bucket was added as theoretical support for a potential future avenue of a theoretical feature. Consider everything having to do with it untested and mutable.
resource "aws_s3_bucket" "orca-archive-worm" {
  bucket = "PREFIX-orca-archive-worm"
  force_destroy = true
  object_lock_enabled = true
  tags = {
    Deployment = "PREFIX"
    Application = "ORCA"
  }
}

resource "aws_s3_bucket_versioning" "orca-archive-worm-versioning" {
  bucket = aws_s3_bucket.orca-archive-worm.id
  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_s3_bucket_object_lock_configuration" "orca-archive-worm-object-lock-config" {
  bucket = aws_s3_bucket.orca-archive-worm.bucket
  rule {
    default_retention {
      mode = "GOVERNANCE"
      days = 180
    }
  }
}

data "aws_iam_policy_document" "orca-archive-worm-policy-json" {
 statement {
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::CUMULUS_ACCOUNT_ID:root"]
      }
      actions = [
                  "s3:PutObject*"
      ]
      resources = [
                  "arn:aws:s3:::PREFIX-orca-archive-worm/*"
                  ]
      condition {
        test     = "StringEquals"
        variable = "s3:x-amz-storage-class"
        values = [
          "GLACIER",
          "DEEP_ARCHIVE"
        ]
      }
   }
}

resource "aws_s3_bucket_policy" "orca-archive-worm-policy" {
  bucket = aws_s3_bucket.orca-archive-worm.id
  policy = data.aws_iam_policy_document.orca-archive-worm-policy-json.json
}

resource "aws_s3_bucket" "orca-reports" {
  bucket = "PREFIX-orca-reports"
  depends_on = [aws_s3_bucket.orca-archive-worm]
  force_destroy = true
  tags = {
    Deployment = "PREFIX"
    Application = "ORCA"
  }
}

resource "aws_s3_bucket_lifecycle_configuration" "orca-reports-lifecycle-rule" {
  bucket = aws_s3_bucket.orca-reports.id
  rule {
    id = "delete objects after 7 days"
    status = "Enabled"
    expiration {
      days = 7
    }
  }
}

data "aws_iam_policy_document" "orca-reports-policy-json" {
  statement {
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::CUMULUS_ACCOUNT_ID:root"]
    }
    actions = [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:ListBucket",
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:PutBucketNotification"
    ]
    resources = [
        "arn:aws:s3:::PREFIX-orca-reports",
        "arn:aws:s3:::PREFIX-orca-reports/*"
        ]
  } 
  statement {
    principals {
      type        = "Service"
      identifiers = ["s3.amazonaws.com"]
      }
      actions = [
                  "s3:PutObject"
      ]
      resources = [
                  "arn:aws:s3:::PREFIX-orca-reports",
                  "arn:aws:s3:::PREFIX-orca-reports/*"
                  ]
      condition {
        test     = "StringEquals"
        variable = "s3:x-amz-acl"
        values = [
          "bucket-owner-full-control"
        ]
      }
      condition {
        test     = "StringEquals"
        variable = "aws:SourceAccount"
        values   = ["${data.aws_caller_identity.dr_account.account_id}"]
      }
      condition {
        test = "ArnLike"
        variable = "aws:SourceArn"
        values = [
          "arn:aws:s3:::PREFIX-*"
        ]
      }
    }
  statement {
    principals {
      type        = "Service"
      identifiers = ["s3.amazonaws.com"]
      }
      actions = [
                  "s3:PutObject"
      ]
      resources = [
                  "arn:aws:s3:::PREFIX-orca-reports",
                  "arn:aws:s3:::PREFIX-orca-reports/*"
                  ]
      condition {
        test     = "StringEquals"
        variable = "s3:x-amz-acl"
        values = [
          "bucket-owner-full-control"
        ]
      }
      condition {
        test     = "StringEquals"
        variable = "aws:SourceAccount"
        values   = ["${data.aws_caller_identity.dr_account.account_id}"]
      }
      condition {
        test = "ArnLike"
        variable = "aws:SourceArn"
        values = [
          "arn:aws:s3:::PREFIX-orca-archive-worm"
        ]
      }
    }
}
  
resource "aws_s3_bucket_policy" "orca-reports-policy" {
  bucket = aws_s3_bucket.orca-reports.id
  policy = data.aws_iam_policy_document.orca-reports-policy-json.json
}

resource "aws_s3_bucket" "orca-primary" {
  # If bucket name is updated, also update orca_RECOVERY_BUCKET_NAME in integration_test/shared/setup_orca.sh
  bucket = "PREFIX-orca-primary"
  force_destroy = true
  tags = {
    Deployment = "PREFIX"
    Application = "ORCA"
  }
}

data "aws_iam_policy_document" "orca-primary-policy-json" {
 statement {
   principals {
     type        = "AWS"
     identifiers = ["arn:aws:iam::CUMULUS_ACCOUNT_ID:root"]
    }
    actions = [
                "s3:GetObject*",
                "s3:RestoreObject",
                "s3:GetBucket*",
                "s3:ListBucket",
                "s3:PutObjectAcl",
                "s3:PutBucketNotification",
                "s3:GetInventoryConfiguration",
                "s3:PutInventoryConfiguration",
                "s3:ListBucketVersions",
                "s3:DeleteObject"
    ]
    resources = [
                "arn:aws:s3:::PREFIX-orca-primary",
                "arn:aws:s3:::PREFIX-orca-primary/*"
                ]
  }
 statement {
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::CUMULUS_ACCOUNT_ID:root"]
      }
      actions = [
                  "s3:PutObject*"
      ]
      resources = [
                  "arn:aws:s3:::PREFIX-orca-primary/*"
                  ]
      condition {
        test     = "StringEquals"
        variable = "s3:x-amz-storage-class"
        values = [
          "GLACIER",
          "DEEP_ARCHIVE"
        ]
      }
   }
}

resource "aws_s3_bucket_policy" "orca-primary-policy" {
  bucket = aws_s3_bucket.orca-primary.id
  policy = data.aws_iam_policy_document.orca-primary-policy-json.json
}