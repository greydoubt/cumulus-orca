{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://github.com/nasa/cumulus-orca/blob/master/tasks/request_from_archive/schemas/output.json",
  "title": "request_from_archive Lambda Output",
  "description": "The output for the request_from_archive Lambda.",
  "type": "object",
  "properties": {
    "granules": {
      "description": "A list of values representing the granules entered through input and their recovery status.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "collectionId": {
            "description": "The id of the collection containing the granule.",
            "type": "string"
          },
          "granuleId": {
            "description": "The id of the granule being restored.",
            "type": "string"
          },
          "recoverFiles": {
            "description": "A list of values representing each file that was requested for recovery.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "errorMessage": {
                  "description": "If the restoration of the file errored, the error will be stored here.",
                  "type": "string"
                },
                "completionTime": {
                  "description": "The time the restore was completed, in UTC and iso-format.",
                  "type": "string",
                  "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?\\+00:00$"
                },
                "filename": {
                  "description": "Name of the granule file with no path.",
                  "type": "string"
                },
                "keyPath": {
                  "description": "S3 key that includes the name of the file and path that is a part of the granule.",
                  "type": "string"
                },
                "lastUpdate": {
                  "description": "The last time the file's status changed, in UTC and iso-format.",
                  "type": "string",
                  "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?\\+00:00$"
                },
                "restoreDestination": {
                  "description": "The bucket the restored file will be moved to after the restore completes.",
                  "type": "string"
                },
                "requestTime": {
                  "description": "The time the restore was requested, in UTC and iso-format.",
                  "type": "string",
                  "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?(Z)?\\+00:00$"
                },
                "statusId": {
                  "description": "The numerical status value that the file is in; 1 - pending or 3 - failed",
                  "type": "integer",
                  "pattern": "(?:^\\W)1|3(?:$|\\W)"
                },
                "success": {
                  "description": "Must be true, otherwise an exception will be raised.",
                  "type": "boolean",
                  "pattern": "(?:^|\\W)true(?:$|\\W)"
                },
                "s3MultipartChunksizeMb": {
                  "description": "The maximum chunk size that will be used when copying the file.",
                  "type": ["integer", "null"]
                }
              },
              "required": ["filename", "keyPath", "lastUpdate", "restoreDestination", "requestTime", "statusId", "success"]
            }
          }
        },
        "required": ["collectionId", "granuleId", "recoverFiles"]
      }
    },
    "asyncOperationId": {
      "description": "The 'job_id' from input event if present, otherwise a newly-generated uuid.",
      "type": "string"
    }
  },
  "required": ["granules", "asyncOperationId"]
}